#!/usr/bin/env python
""" getpage - A Program to fetch a webpage and save it in a single file in MIME-HTML (RFC 2557) format.

    MIME-HTML makes it possible to save a webpage complete with all needed ressources
    to render, including stylesheets, images or scripts right into a single file.

"""
"""
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

from pagegetter import PageGetter
import argparse


if __name__ == '__main__':
    print "getpage 0.0.5, a non-interactive webpage downloader"
    """ Takes the URL of a HTML Page. Returns a MIME encapsulated form of the HTML Code.

        If the HTML page itself links to images, scripts or stylesheet it calls the matching
        encapsulation Methods for them recursivly

    """

    parser = argparse.ArgumentParser(description='Store a webpage into a single MIME-HTML file', usage='getpage [options] url')

    parser.add_argument("url",
                      help="the url of the webpage we should get")
    parser.add_argument("-V", "--version", action='version', version='getpage 0.0.5',
                      help="the version of the programm")
    parser.add_argument("-o", "--output", dest="filename",
                      help="name of the outputfile FILE", metavar="FILE")
    parser.add_argument("-d", "--debug",
                      action="store_false", dest="verbose", default=True,
                      help="print debug and verbose status messages to stdout")
    parser.add_argument("-v", "--verbose",
                      action="store_false", dest="verbose", default=True,
                      help="print verbose status messages to stdout")
    parser.add_argument("-q", "--quiet",
                      action="store_false", dest="verbose", default=True,
                      help="don't print status messages to stdout")

    options = parser.parse_args()
    page = PageGetter(options)
    page.retrieve()
